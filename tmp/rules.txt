CompUnit      ::= [CompUnit] (Decl | FuncDef);

Decl          ::= ConstDecl | VarDecl;
ConstDecl     ::= "const" BType ConstDef {"," ConstDef} ";";
BType         ::= "int" | "char" | "long long";
ConstDef      ::= IDENT {"[" ConstExp "]"} "=" ConstInitVal;
ConstInitVal  ::= ConstExp | "{" [ConstInitVal {"," ConstInitVal}] "}";
VarDecl       ::= BType VarDef {"," VarDef} ";";
VarDef        ::= IDENT {"[" ConstExp "]"}
                | IDENT {"[" ConstExp "]"} "=" InitVal;
InitVal       ::= Exp | "{" [InitVal {"," InitVal}] "}";

FuncDef       ::= FuncType IDENT "(" [FuncFParams] ")" Block;
FuncType      ::= "void" | "int";
FuncFParams   ::= FuncFParam {"," FuncFParam};
FuncFParam    ::= BType IDENT ["[" "]" {"[" ConstExp "]"}];

Block         ::= "{" {BlockItem} "}";
BlockItem     ::= Decl | Stmt;
Stmt          ::= LVal "=" Exp ";"
                | [Exp] ";"
                | Block
                | "if" "(" Exp ")" Stmt ["else" Stmt]
                | "while" "(" Exp ")" Stmt
                | "break" ";"
                | "continue" ";"
                | "return" [Exp] ";";
                | "do" "{" Stmt "}" "while" "(" Stmt ")" ";"

Exp           ::= LOrExp;
LVal          ::= IDENT {"[" Exp "]"};
PrimaryExp    ::= "(" Exp ")" | LVal | Number;
Number        ::= INT_CONST;
UnaryExp      ::= PrimaryExp | IDENT "(" [FuncRParams] ")" | UnaryOp UnaryExp;
UnaryOp       ::= "+" | "-" | "!";
FuncRParams   ::= Exp {"," Exp};
MulExp        ::= UnaryExp | MulExp ("*" | "/" | "%") UnaryExp;
AddExp        ::= MulExp | AddExp ("+" | "-") MulExp;
RelExp        ::= AddExp | RelExp ("<" | ">" | "<=" | ">=") AddExp;
EqExp         ::= RelExp | EqExp ("==" | "!=") RelExp;
LAndExp       ::= EqExp | LAndExp "&&" EqExp;
LOrExp        ::= LAndExp | LOrExp "||" LAndExp;
ConstExp      ::= Exp;

struct Obj {
virtual ~Obj() = default;
};
struct Decl : public Obj { // 表达一个符号声明（变量、参数等）
std::string name; // 符号名
Type type; // 符号类型（这里省略了 struct Type 的定义）
};
struct Expr ： public Obj {
Type type; // C语言的每个表达式都有类型
};
struct IntegerLiteral : public Expr {
std::int64_t val; // 整数字面量的值
} s
truct DeclRefExpr : public Expr {
Decl* decl; // 指向引用的声明
};
struct BinaryExpr : public Expr {
enum { kAdd, kSub, kMul, kDiv } op; // 操作符
Expr *lft, *rht; // 指向左右操作数
};

符号	含义	符号	含义
CompUnit	编译单元	Decl	声明
ConstDecl	常量声明	BType	基本类型
ConstDef	常数定义	ConstInitVal	常量初值
VarDecl	变量声明	VarDef	变量定义
InitVal	变量初值	FuncDef	函数定义
FuncType	函数类型	FuncFParams	函数形参表
FuncFParam	函数形参	Block	语句块
BlockItem	语句块项	Stmt	语句
Exp	表达式	LVal	左值表达式
PrimaryExp	基本表达式	Number	数值
UnaryExp	一元表达式	UnaryOp	单目运算符
FuncRParams	函数实参表	MulExp	乘除模表达式
AddExp	加减表达式	RelExp	关系表达式
EqExp	相等性表达式	LAndExp	逻辑与表达式
LOrExp	逻辑或表达式	ConstExp	常量表达式